import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class SimpleAlgorithms {

  public void fileDataRead() {
    String pathname = "Lab0TestData.txt";
    File file = new File(pathname);
    Scanner input = null;
    try {
      input = new Scanner(file);
    } catch (FileNotFoundException ex) {
      System.out.println("*** Cannot open " + pathname + " ***");
      System.exit(1);
    }

    while (input.hasNextInt()) {
      switch (input.nextInt()) {
      case 1: {
        int num = input.nextInt();
        if (num > 0)
          factors(num);
        else
          System.out.println("Number is not positive");
      }
        break;

      case 2: {
        int a = input.nextInt();
        int b = input.nextInt();
        if (a > 0 && b > 0)
          System.out.println("The GCD is: " + gcd(a, b));
        else
          System.out.println("One of the method conditions are not met");
      }
        break;

      case 3: {
        int num = input.nextInt();
        if (num > 1 && prime(num) == true)
          System.out.println("The number is prime:");
        else
          System.out.println("The number is not prime:");
      }
        break;

      case 4: {
        double base = input.nextDouble();
        int exponent = input.nextInt();
        if (base > 0 || base < 0)
          System.out.println("The value is: " + power(base, exponent));
        else if (base == 0 && exponent > 0)
          System.out.println("The value is: " + power(base, exponent));
        else
          System.out.println("One of the method conditions are not met");
      }
        break;

      case 5: {
        int num = input.nextInt();
        int n = input.nextInt();
        if (n > 0)
          System.out.println("The digit is: " + findDigit(num, n));
        else
          System.out.println("One of the method conditions are not met");
      }
        break;

      case 6: {
        int num = input.nextInt();
        if (num > 0)
          downDigits(num);
        else
          System.out.println("Number is not positive");
      }
        break;

      case 7: {
        double num = input.nextDouble();
        System.out.println("There are: " + countDigits(num) + " digits.");
      }
        break;
      }
    }
  }

  // case 1
  public void factors(int num) {
    System.out.print("The factors of " + num + " are:");
    for (int x = 1; x <= num; x++) {
      if (x == num) {
        System.out.print(" " + x + ".\n");
      } else if (num % x == 0) {
        System.out.print(" " + x + ",");
      }
    }
  }

  // case 2
  public int gcd(int a, int b) {
    if (a < b) {
      for (int x = a; x > 0; x--) {
        if (a % x == 0 && b % x == 0) {
          return x;
        }
      }
    } else if (a == b) {
      return a;
    } else {
      return gcd(b, a);
    }
    return 0;
  }

  // case 3
  public boolean prime(int num) {
    if (num > 1) {
      for (int x = num - 1; x > 0; x--) {
        if (x == 1) {
          return true;
        }
        if (num % x == 0) {
          return false;
        }
      }
    }
    return false;
  }

  // case 4
  public double power(double base, int exponent) {
    double total = 1.0;
    if (exponent > 0) {
      for (int x = 0; x < exponent; x++) {
        total = total * base;
      }
    } else if (exponent != 0)
      for (int x = 0; x < (-1 * exponent); x++) {
        total = total / base;
      }
    return total;
  }

  // case 5
  public int findDigit(int num, int n) {
    int digit;
    if (num >= 0) {
      int exponent = (int) power(10, n);
      digit = (((num % exponent) - (num % (exponent / 10))) / (exponent / 10));
      return digit;
    } else {
      digit = findDigit(-1 * num, n);
    }
    return digit;
  }

  // case 6
  public void downDigits(int num) {
    int x = 0;
    int numdigits = 0;
    int digit;
    while (x <= num) {
      if (x == 0) {
        x = 1;
      }
      x = x * 10;
      numdigits++;
    }
    System.out.println("The digits of " + num + " are:");
    for (x = numdigits; x > 0; x--) {
      digit = findDigit(num, x);
      System.out.println(digit);
    }
  }

  // case 7
  public int countDigits(double num) {
    int x = 0;
    int count = 0;
    while (x < num) {
      if (x == 0) {
        x = 1;
      }
      x = x * 10;
      count++;
    }
    return count;
  }
}
